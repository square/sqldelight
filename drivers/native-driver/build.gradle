import org.jetbrains.kotlin.gradle.plugin.KotlinTarget
import org.jetbrains.kotlin.konan.target.HostManager

apply plugin: 'org.jetbrains.kotlin.multiplatform'

def ideaActive = System.getProperty("idea.active") == "true"

def disableCompilation(targets) {
  configure(targets) {
    compilations.all {
      cinterops.all { project.tasks[interopProcessingTaskName].enabled = false }
      compileKotlinTask.enabled = false
    }
    binaries.all { linkTask.enabled = false }
    mavenPublication { publicationToDisable ->
      tasks.withType(AbstractPublishToMaven).all {
        onlyIf { publication != publicationToDisable }
      }
      tasks.withType(GenerateModuleMetadata).all {
        onlyIf { publication.get() != publicationToDisable }
      }
    }
  }
}

kotlin {
  def knTargets = new ArrayList<KotlinTarget>()
  if (ideaActive) {
    knTargets.add(macosX64("native"))
//    macosX64("nativeDarwin") // Uncomment to get IDE recognition for darwin code until HMPP fixed
    knTargets.add(mingwX64("mingw"))
    knTargets.add(linuxX64("linux"))
  } else {
    knTargets.add(macosX64())
    knTargets.add(iosArm32())
    knTargets.add(iosArm64())
    knTargets.add(iosX64())
    knTargets.add(watchosArm32())
    knTargets.add(watchosArm64())
    knTargets.add(watchosX86())
    knTargets.add(watchosX64())
    knTargets.add(tvosArm64())
    knTargets.add(tvosX64())
    knTargets.add(mingwX64())
    knTargets.add(linuxX64())

    //disable compilations depending on host because of cross compilation linking issues
    //see: https://youtrack.jetbrains.com/issue/KT-30498
    if (HostManager.hostIsLinux) {
      knTargets.remove(targets.linuxX64)
    } else if (HostManager.hostIsMingw) {
      knTargets.remove(targets.mingwX64)
    } else {
      knTargets.removeAll([
            targets.macosX64,
            targets.iosArm32,
            targets.iosArm64,
            targets.iosX64,
            targets.watchosArm32,
            targets.watchosArm64,
            targets.watchosX86,
            targets.watchosX64,
            targets.tvosArm64,
            targets.tvosX64
      ])
    }
    disableCompilation(knTargets)
  }

  sourceSets {
    commonMain {
      dependencies {
        api project (':runtime')
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
        implementation deps.testhelp
      }
    }
    nativeMain {
      dependencies {
        api deps.sqliter
        implementation deps.stately.core
      }
    }
    nativeTest {
      dependencies {
        implementation project(':drivers:driver-test')
      }
    }
    nativeDarwinMain{
      dependsOn(nativeMain)
    }
    mingwMain{
      dependsOn(nativeMain)
    }
    linuxMain{
      dependsOn(nativeMain)
    }
  }

  if (!ideaActive) {
    configure([targets.iosX64, targets.iosArm32, targets.iosArm64, targets.tvosX64, targets.tvosArm64, targets.watchosX86, targets.watchosX64, targets.watchosArm32, targets.watchosArm64, targets.macosX64]) {
      compilations.main.source(sourceSets.nativeDarwinMain)
      compilations.test.source(sourceSets.nativeTest)
      compilations.test {
        kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
      }
    }
    configure([targets.linuxX64]) {
      compilations.main.source(sourceSets.linuxMain)
      compilations.test.source(sourceSets.nativeTest)
      compilations.test {
        kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3 -L/usr/lib/x86_64-linux-gnu -L/usr/lib"]
      }
    }
    configure([targets.mingwX64]) {
      compilations.main.source(sourceSets.mingwMain)
      compilations.test.source(sourceSets.nativeTest)
      compilations.test {
        kotlinOptions.freeCompilerArgs += ["-linker-options", "-Lc:\\msys64\\mingw64\\lib"]
        kotlinOptions.freeCompilerArgs += ["-linker-options", "-L$projectDir\\libs".toString()]
        kotlinOptions.freeCompilerArgs += ["-linker-options", "-lsqlite3"]
      }
    }
  }
}

apply from: "$rootDir/gradle/gradle-mvn-push.gradle"
